use crate::errors::AppError;
use crate::log_manager::LogEntry;
use crate::settings::Settings;
use chrono::{Datelike, Local, NaiveDate};
use reqwest::Client;
use serde::{Deserialize, Serialize};
use serde_json::json;
use std::collections::HashMap;
use std::fs;
use std::path::Path;
use std::sync::Arc;

/// 摘要类型
#[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq)]
pub enum SummaryType {
    /// 周摘要
    Weekly,
    /// 月摘要
    Monthly,
    /// 季度摘要
    Quarterly,
    /// 自定义日期范围
    Custom,
}

/// 摘要生成配置
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SummaryConfig {
    /// 摘要类型
    pub summary_type: SummaryType,
    /// 开始日期 (自定义日期范围时使用)
    pub start_date: Option<NaiveDate>,
    /// 结束日期 (自定义日期范围时使用)
    pub end_date: Option<NaiveDate>,
    /// 摘要标题
    pub title: String,
}

/// LLM API 响应
#[derive(Debug, Deserialize)]
struct OllamaResponse {
    response: String,
}

/// 摘要生成器
pub struct SummaryGenerator {
    settings: Settings,
    client: Client,
}

impl SummaryGenerator {
    /// 创建新的摘要生成器
    pub fn new(settings: Settings) -> Self {
        // 创建一个具有超时设置的HTTP客户端
        let client = Client::builder()
            .timeout(std::time::Duration::from_secs(120)) // 设置120秒超时
            .connect_timeout(std::time::Duration::from_secs(30)) // 设置30秒连接超时
            .build()
            .unwrap_or_else(|_| {
                log::warn!("无法创建带自定义配置的HTTP客户端，将使用默认配置");
                Client::new()
            });
            
        Self {
            settings,
            client,
        }
    }

    /// 获取摘要API类型
    fn get_summary_api_type(&self) -> u8 {
        self.settings.get_summary_api_type()
    }

    /// 生成摘要
    pub async fn generate_summary(
        &self,
        logs: HashMap<String, Vec<LogEntry>>,
        config: SummaryConfig,
    ) -> Result<String, AppError> {
        // 将日志合并为一个字符串
        let mut logs_content = String::new();
        
        for (date, entries) in logs.iter() {
            logs_content.push_str(&format!("## {}\n", date));
            
            for entry in entries {
                logs_content.push_str(&format!("- {}\n", entry.content));
            }
            
            logs_content.push('\n');
        }
        
        // 生成提示
        let prompt = match config.summary_type {
            SummaryType::Weekly => "对以下工作日志进行周总结，分析工作内容、成果和存在的问题，提出改进建议。",
            SummaryType::Monthly => "对以下工作日志进行月度总结，总结月度工作重点、成果和经验教训，提出下月工作计划。",
            SummaryType::Quarterly => "对以下工作日志进行季度总结，分析季度目标完成情况、主要项目进展、成果和问题，提出下季度规划。",
            SummaryType::Custom => "对以下指定时间范围内的工作日志进行总结，分析关键工作内容、成果和经验教训。",
        };
        
        let full_prompt = format!("{}\n\n{}", prompt, logs_content);
        
        // 调用LLM API生成摘要
        let summary = if self.settings.use_local_ollama {
            self.generate_with_ollama(&full_prompt).await?
        } else {
            self.generate_with_external_api(&full_prompt).await?
        };
        
        // 保存摘要到文件
        let file_name = self.get_summary_filename(&config);
        let file_path = Path::new(&self.settings.log_output_dir).join(file_name);
        
        // 确保目录存在
        if let Some(parent) = file_path.parent() {
            if !parent.exists() {
                fs::create_dir_all(parent)?;
            }
        }
        
        // 保存摘要
        fs::write(&file_path, &summary)?;
        
        Ok(summary)
    }

    /// 使用本地 Ollama 生成摘要
    async fn generate_with_ollama(&self, prompt: &str) -> Result<String, AppError> {
        let url = format!("{}/api/generate", self.settings.ollama_address);
        
        let response = self.client
            .post(&url)
            .json(&json!({
                "model": self.settings.ollama_model,
                "prompt": prompt,
                "system": "你是一个专业的工作日志分析助手，擅长总结工作内容并提出见解。",
                "stream": false
            }))
            .send()
            .await
            .map_err(AppError::ReqwestError)?;
        
        if !response.status().is_success() {
            return Err(AppError::SummaryError(format!(
                "Ollama API 调用失败: {}",
                response.status()
            )));
        }
        
        let ollama_response: OllamaResponse = response
            .json()
            .await
            .map_err(AppError::ReqwestError)?;
        
        Ok(ollama_response.response)
    }

    /// 使用外部 API 生成摘要
    async fn generate_with_external_api(&self, prompt: &str) -> Result<String, AppError> {
        if self.settings.llm_api_url.is_empty() || self.settings.llm_api_key.is_empty() {
            return Err(AppError::SummaryError(
                "未配置外部 API URL 或 API Key".to_string()
            ));
        }
        
        // 检测是否为百炼API (百炼API的base_url包含 dashscope.aliyuncs.com)
        let is_dashscope = self.settings.llm_api_url.contains("dashscope.aliyuncs.com");
        
        log::info!("使用外部API生成摘要, URL: {}, 是否为百炼API: {}", self.settings.llm_api_url, is_dashscope);
        
        // 构建请求体
        let request_body = if is_dashscope {
            // 百炼API使用与OpenAI兼容的格式
            json!({
                "model": "qwen-max", // 默认使用通义千问Max模型
                "messages": [
                    {
                        "role": "system", 
                        "content": "你是一个专业的工作日志分析助手，擅长总结工作内容并提出见解。"
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "temperature": 0.7,
                "max_tokens": 4000
            })
        } else {
            // 标准OpenAI格式
            json!({
                "model": "gpt-4",
                "messages": [
                    {
                        "role": "system",
                        "content": "你是一个专业的工作日志分析助手，擅长总结工作内容并提出见解。"
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "temperature": 0.7,
                "max_tokens": 4000
            })
        };
        
        log::debug!("API请求体: {}", serde_json::to_string_pretty(&request_body).unwrap_or_default());
        
        // 发送请求
        let response = self.client
            .post(&self.settings.llm_api_url)
            .header("Authorization", format!("Bearer {}", self.settings.llm_api_key))
            .json(&request_body)
            .send()
            .await
            .map_err(|e| {
                log::error!("API请求失败: {}", e);
                
                // 针对不同连接错误提供更具体的错误信息
                if e.is_timeout() {
                    log::error!("API请求超时");
                    AppError::SummaryError("API请求超时，请检查网络连接或稍后重试".to_string())
                } else if e.is_connect() {
                    if is_dashscope {
                        log::error!("阿里云百炼API连接错误");
                        AppError::SummaryError("无法连接到阿里云百炼API，请检查网络连接和API地址".to_string())
                    } else {
                        log::error!("API连接错误");
                        AppError::SummaryError("无法连接到API服务器，请检查网络连接和API地址".to_string())
                    }
                } else {
                    AppError::ReqwestError(e)
                }
            })?;
        
        let status = response.status();
        if !status.is_success() {
            let error_text = response.text().await.unwrap_or_default();
            log::error!("API返回错误状态: {}, 响应: {}", status, error_text);
            
            // 提供更详细的错误信息
            let error_msg = if is_dashscope && status.as_u16() == 404 {
                "阿里云百炼API调用失败: 请检查URL格式与API Key是否正确".to_string()
            } else {
                format!("外部 API 调用失败: {} - {}", status, error_text)
            };
            
            return Err(AppError::SummaryError(error_msg));
        }
        
        // 获取响应JSON
        let response_text = response.text().await.map_err(AppError::ReqwestError)?;
        log::debug!("API原始响应: {}", response_text);
        
        let json_response: serde_json::Value = serde_json::from_str(&response_text)
            .map_err(|e| {
                log::error!("解析JSON响应失败: {}", e);
                AppError::SerdeError(e)
            })?;
        
        // 提取回复，支持不同的响应格式
        let content = if is_dashscope {
            // 尝试获取百炼API的响应格式
            // 首先尝试标准OpenAI兼容格式
            let standard_format = json_response
                .get("choices")
                .and_then(|choices| choices.get(0))
                .and_then(|choice| choice.get("message"))
                .and_then(|message| message.get("content"))
                .and_then(|content| content.as_str());
                
            if standard_format.is_some() {
                standard_format
            } else {
                // 尝试阿里云旧版格式
                json_response
                    .get("output")
                    .and_then(|output| output.get("text"))
                    .and_then(|text| text.as_str())
            }
        } else {
            // 标准OpenAI格式
            json_response
                .get("choices")
                .and_then(|choices| choices.get(0))
                .and_then(|choice| choice.get("message"))
                .and_then(|message| message.get("content"))
                .and_then(|content| content.as_str())
        };
        
        match content {
            Some(text) => {
                log::info!("成功提取响应内容，长度: {} 字符", text.len());
                Ok(text.to_string())
            },
            None => {
                log::error!("无法从响应中提取内容: {}", response_text);
                
                // 尝试查找错误信息
                let error_message = json_response
                    .get("error")
                    .and_then(|e| e.get("message"))
                    .and_then(|m| m.as_str())
                    .unwrap_or("未知错误");
                    
                Err(AppError::SummaryError(format!("无法解析API响应: {}", error_message)))
            }
        }
    }

    /// 获取摘要文件名
    fn get_summary_filename(&self, config: &SummaryConfig) -> String {
        let now = Local::now();
        
        match config.summary_type {
            SummaryType::Weekly => {
                format!("weekly_summary_{}.md", now.format("%Y-%m-%d"))
            }
            SummaryType::Monthly => {
                format!("monthly_summary_{}-{}.md", now.year(), now.month())
            }
            SummaryType::Quarterly => {
                let quarter = (now.month() - 1) / 3 + 1;
                format!("quarterly_summary_{}-Q{}.md", now.year(), quarter)
            }
            SummaryType::Custom => {
                let start = config
                    .start_date
                    .unwrap_or_else(|| now.date_naive())
                    .format("%Y-%m-%d")
                    .to_string();
                let end = config
                    .end_date
                    .unwrap_or_else(|| now.date_naive())
                    .format("%Y-%m-%d")
                    .to_string();
                format!("custom_summary_{}_{}.md", start, end)
            }
        }
    }

    /// 使用流式处理生成摘要，并通过回调函数通知进度
    pub async fn generate_summary_with_stream<F>(
        &self,
        logs: HashMap<String, Vec<LogEntry>>,
        config: SummaryConfig,
        progress_callback: F,
    ) -> Result<String, AppError>
    where
        F: Fn(&str) + Send + Sync + 'static,
    {
        let progress_callback = Arc::new(progress_callback);
        
        // 将日志合并为一个字符串
        let mut logs_str = String::new();
        for (date, entries) in logs.iter() {
            logs_str.push_str(&format!("## {}\n", date));
            for entry in entries {
                logs_str.push_str(&format!("- {}\n", entry.content));
            }
            logs_str.push('\n');
        }
        
        // 根据摘要类型构建提示词
        let (prompt, prompt_system) = self.build_prompt(&config.summary_type, &config.title);
        
        // 根据API类型选择不同的处理方式
        match self.get_summary_api_type() {
            0 => {
                // 本地API (非流式)
                // 对于本地API，我们暂时不支持流式处理，而是模拟进度
                progress_callback("正在使用本地模型分析日志...");
                
                let summary = self.generate_with_local_api(&prompt, &logs_str).await?;
                
                // 模拟几次更新以提供一些反馈
                let segments = vec![
                    "正在生成摘要...",
                    "分析工作内容...",
                    "整理关键活动...",
                ];
                
                for segment in segments {
                    tokio::time::sleep(tokio::time::Duration::from_millis(800)).await;
                    progress_callback(segment);
                }
                
                // 最后发送完整结果
                Ok(summary)
            }
            _ => {
                // 外部API (流式)
                self.generate_with_external_api_stream(&prompt, &prompt_system, &logs_str, progress_callback).await
            }
        }
    }
    
    /// 使用外部API流式生成摘要
    async fn generate_with_external_api_stream<F>(
        &self,
        prompt: &str,
        prompt_system: &str,
        logs: &str,
        progress_callback: F,
    ) -> Result<String, AppError>
    where
        F: Fn(&str) + Send + Sync + 'static,
    {
        let api_type = self.settings.get_summary_api_type();
        let api_key = self.settings.get_summary_api_key(api_type);
        let api_url = self.settings.get_summary_api_url(api_type);
        
        // 创建客户端
        let client = reqwest::Client::builder()
            .timeout(std::time::Duration::from_secs(180)) // 超时时间设置为3分钟
            .connect_timeout(std::time::Duration::from_secs(30)) // 连接超时设置为30秒
            .build()
            .map_err(|e| {
                log::error!("创建HTTP客户端失败: {}", e);
                AppError::SummaryError(format!("创建HTTP客户端失败: {}", e))
            })?;
        
        // 构建请求体
        let mut msgs = vec![
            serde_json::json!({
                "role": "system",
                "content": prompt_system
            }),
            serde_json::json!({
                "role": "user",
                "content": format!("{}\n\n{}", prompt, logs)
            })
        ];
        
        let request_body = if api_type == 2 {
            // 百联 API
            serde_json::json!({
                "model": "qwen-max",
                "messages": msgs,
                "stream": true
            })
        } else {
            // OpenAI 兼容 API
            serde_json::json!({
                "model": "gpt-3.5-turbo",
                "messages": msgs,
                "temperature": 0.7,
                "stream": true
            })
        };
        
        // 创建请求
        let request = client
            .post(&api_url)
            .header("Content-Type", "application/json")
            .header("Authorization", format!("Bearer {}", api_key));
            
        // 发送请求
        let response = request
            .json(&request_body)
            .send()
            .await
            .map_err(|e| {
                // 详细的错误处理
                let error_msg = if e.is_timeout() {
                    log::error!("API请求超时: {}", e);
                    if api_type == 2 {
                        format!("百联API请求超时: {}。请检查网络连接或稍后重试。", e)
                    } else {
                        format!("API请求超时: {}。请检查网络连接或稍后重试。", e)
                    }
                } else if e.is_connect() {
                    log::error!("API连接失败: {}", e);
                    if api_type == 2 {
                        format!("无法连接到百联API: {}。请检查网络环境是否允许访问该服务。", e)
                    } else {
                        format!("API连接失败: {}。请检查网络连接或API配置。", e)
                    }
                } else {
                    log::error!("API请求失败: {}", e);
                    format!("发送API请求失败: {}", e)
                };
                AppError::SummaryError(error_msg)
            })?;
            
        // 检查响应状态
        if !response.status().is_success() {
            let status = response.status();
            let text = response.text().await.unwrap_or_else(|_| "无法读取响应内容".to_string());
            
            log::error!("API错误: 状态 {}, 响应: {}", status, text);
            
            let error_msg = match status.as_u16() {
                401 => format!("API认证失败: 无效的API密钥。请在设置中检查您的API密钥。"),
                403 => format!("API访问被拒绝: 您没有权限访问此资源。请检查API密钥权限。"),
                404 => {
                    if api_type == 2 {
                        format!("百联API资源未找到: 请检查API地址是否正确。确认您使用的是兼容模式URL: https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions")
                    } else {
                        format!("API资源未找到: 请检查API地址是否正确。")
                    }
                },
                429 => format!("API请求过多: 已超出速率限制。请稍后再试。"),
                _ if status.as_u16() >= 500 => format!("API服务器错误 {}: 服务暂时不可用。请稍后再试。", status),
                _ => format!("API请求失败: 状态码 {}, 响应: {}", status, text),
            };
            
            return Err(AppError::SummaryError(error_msg));
        }
        
        // 处理响应
        let mut result = String::new();
        
        // 使用流式处理
        let mut stream = response.bytes_stream();
        
        while let Some(item) = stream.next().await {
            match item {
                Ok(bytes) => {
                    let chunk = String::from_utf8_lossy(&bytes);
                    
                    // 解析SSE格式数据
                    for line in chunk.lines() {
                        if line.starts_with("data: ") {
                            let data = &line[6..]; // 去掉 "data: " 前缀
                            
                            // 检查流是否结束
                            if data == "[DONE]" {
                                continue;
                            }
                            
                            // 尝试解析JSON
                            match serde_json::from_str::<serde_json::Value>(data) {
                                Ok(json) => {
                                    // 尝试提取内容
                                    // 首先尝试OpenAI格式
                                    if let Some(choices) = json.get("choices") {
                                        if let Some(choice) = choices.get(0) {
                                            if let Some(delta) = choice.get("delta") {
                                                if let Some(content) = delta.get("content") {
                                                    if let Some(text) = content.as_str() {
                                                        result.push_str(text);
                                                        progress_callback(text);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    // 尝试百联格式
                                    else if let Some(output) = json.get("output") {
                                        if let Some(choices) = output.get("choices") {
                                            if let Some(choice) = choices.get(0) {
                                                if let Some(text) = choice.get("text") {
                                                    if let Some(content) = text.as_str() {
                                                        result.push_str(content);
                                                        progress_callback(content);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                Err(e) => {
                                    log::debug!("解析JSON失败: {} - 数据: {}", e, data);
                                    // 继续处理下一行数据
                                }
                            }
                        }
                    }
                },
                Err(e) => {
                    log::error!("读取响应流失败: {}", e);
                    return Err(AppError::SummaryError(format!("读取响应流失败: {}", e)));
                }
            }
        }
        
        // 流处理完成后，可以选择将结果写入文件
        if let Some(ref doc_dir) = self.settings.doc_dir {
            let date_format = format!("{}", Local::now().format("%Y-%m-%d"));
            let filename = format!("{}-{}.md", date_format, config.title);
            let path = Path::new(doc_dir).join(&filename);
            
            fs::write(&path, &result).map_err(|e| {
                log::error!("保存摘要到文件失败: {}", e);
                AppError::IoError(format!("保存摘要到文件失败: {}", e))
            })?;
            
            log::info!("摘要已保存到文件: {:?}", path);
        }
        
        Ok(result)
    }

    /// 将日志条目转换为字符串
    fn compile_logs_to_string(&self, logs: &[LogEntry]) -> String {
        let mut logs_content = String::new();
        
        // 按日期分组
        let mut entries_by_date: HashMap<String, Vec<&LogEntry>> = HashMap::new();
        for entry in logs {
            let date = entry.created_at.split('T').next().unwrap_or("未知日期").to_string();
            entries_by_date.entry(date).or_default().push(entry);
        }
        
        // 按日期排序
        let mut dates: Vec<String> = entries_by_date.keys().cloned().collect();
        dates.sort();
        
        // 构建日志内容
        for date in dates {
            logs_content.push_str(&format!("## {}\n", date));
            
            if let Some(entries) = entries_by_date.get(&date) {
                for entry in entries {
                    logs_content.push_str(&format!("- {}\n", entry.content));
                }
            }
            
            logs_content.push('\n');
        }
        
        logs_content
    }
    
    /// 根据摘要类型和标题构建提示词
    fn build_prompt(&self, summary_type: &SummaryType, title: &str) -> (String, String) {
        let prompt_system = "你是一个专业的工作日志分析助手，擅长总结工作内容并提出见解。".to_string();
        
        let prompt = match summary_type {
            SummaryType::Weekly => format!("请对以下工作日志进行周总结「{}」，分析工作内容、成果和存在的问题，提出改进建议。", title),
            SummaryType::Monthly => format!("请对以下工作日志进行月度总结「{}」，总结月度工作重点、成果和经验教训，提出下月工作计划。", title),
            SummaryType::Quarterly => format!("请对以下工作日志进行季度总结「{}」，分析季度目标完成情况、主要项目进展、成果和问题，提出下季度规划。", title),
            SummaryType::Custom => format!("请对以下指定时间范围内的工作日志进行总结「{}」，分析关键工作内容、成果和经验教训。", title),
        };
        
        (prompt, prompt_system)
    }
    
    /// 生成本地API摘要
    async fn generate_with_local_api(&self, prompt: &str, logs: &str) -> Result<String, AppError> {
        // 构建完整提示词
        let full_prompt = format!("{}\n\n{}", prompt, logs);
        
        // 调用已有的Ollama生成函数
        self.generate_with_ollama(&full_prompt).await
    }
} 